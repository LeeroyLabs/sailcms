type Query {
    version: String

    # Users
    user(id: ID!): User
    users(page: Int!, limit: Int!, search: String, sorting: UserSort, type: UserType, meta: MetaSearch, status: Boolean, validated: Boolean, group_id: String): UserListing

    # Authentication
    resendValidationEmail(email: String!): Boolean!
    authenticate(email: String!, password: String!): LoginResult!
    verifyAuthenticationToken(token: String!): User
    verifyTFA(user_id: ID!, code: String!): User
    forgotPassword(email: String!): Boolean!
    userWithToken: User

    # Roles & ACL
    roles: [Role!]!
    role(id: ID!): RoleConfig
    permissions: [Permission!]!

    # Assets
    asset(id: ID!): Asset
    assets(page: Int!, limit: Int!, folder: String, search: String, sort: String, direction: SortingOrder, site_id: String!): AssetListing
    assetFolders(site_id: String!): [Folder!]!
    assetConfig: AssetConfig!
    assetTransformForId(id: ID!, transform_name: String!): String!

    # Emails v1
    emailV1(id: ID!): Email
    emailsV1: [Email!]!

    # Emails
    email(id: ID!): Email
    emails(site_id: String!): [Email!]!
    emailTemplates(site_id: String!): [EmailTemplate!]!

    # Entries
    homepageEntry(locale: String!, site_id: ID!): Entry
    entryTypes: [EntryType!]!
    entryType(handle: String): EntryType
    entries(entry_type_handle: String!, page: Int, limit: Int, search: String, sort: String, direction: SortingOrder, only_trash: Boolean, locale: String): EntryListing
    entryByUrl(url: String!, site_id: String): Entry
    entry(id: ID!, entry_type_handle: String): Entry
    entryVersion(id: ID!): EntryVersion
    entryVersions(entry_id: ID!): [EntryVersion!]!

    entryField(key: String!): EntryField
    entryFieldById(id: ID!): EntryField
    entryFields: [EntryField!]!
    entryFieldValidateKey(key: String!): Boolean!

    entryLayout(slug: String!): EntryLayout
    entryLayoutById(id: ID!): EntryLayout
    entryLayouts(ignoreTrashed: Boolean): [EntryLayout!]!

    # Registers
    registeredExtensions: RegisteredExtensions!

    # Categories
    category(id: ID): Category
    categoryBySlug(slug: String!, site_id: String!): Category
    categoryFullTree(parent_id: ID!, site_id: String!): [Category!]!
    categoryEntries(slug: String, id: ID, site_id: String): [Entry!]

    # Navigation
    navigation(slug: String!): [NavigationItem!]!
    navigationDetailsList(sort: String!, direction: SortingOrder!, locale: String, site_id: String): [Navigation!]!
    navigationDetails(slug: String!): Navigation

    # UI Related
    navigationElements: NavigationElements!
    settingsElements: SettingsElements!
    handshakeKey: String!

    # Groups
    group(id: ID!): Group
    groups: [Group!]!

    # Queue
    task(id: ID!): Task!
    taskLogs(id: ID!): [String!]!
    taskList(limit: Int): [Task!]!
    taskSearch(page: Int!, limit: Int!, search: String, sort: String, order: SortingOrder): TasksListing!
    taskRunningTime(pid: ID!): Int!
    cliCommand: [String!]!

    # Global SEO
    getSeoDefaultConfig: SeoDefaultConfig!
    getSeoSettings: SeoSettings!

    # Redirection
    getRedirection(id: ID!): Redirection
    getRedirections(page: Int!, limit: Int!, search: String, sort: String, order: SortingOrder): RedirectionListing!

    # Broken Link
    getBrokenLinks(page: Int!, limit: Int!, search: String, sort: String, order: SortingOrder): BrokenLinkListing!

    #{CUSTOM_QUERIES}#
}

type Mutation {
    # Users
    createUser(name: UserNameInput!, email: String!, password: String!, group: String, avatar: String, meta: UserMetaInput!, locale: String, roles: [String!], create_qith_aet_password: Boolean, use_email_template: String): ID!
    createAdminUser(name: UserNameInput!, email: String!, roles: [String!]!, group: String, avatar: String, meta: UserMetaInput!, locale: String, pre_activated: Boolean): ID!
    updateUser(id: ID!, name: UserNameInput! email: String, password: String, roles: [String!], avatar: String, meta: UserMetaInput, locale: String): Boolean!
    deleteUser(id: ID!): Boolean!
    deleteUsers(ids: [ID!]!): Boolean!
    validateAccount(code: String!): Boolean!
    changePassword(code: String!, password: String!): PasswordChangeResult!
    changeUserStatus(ids: [ID!]!, status: Boolean!): Boolean!

    # Roles
    createRole(name: String!, description: String!, level: Int!, permissions: [String!]!): Boolean!
    updateRole(id: ID!, name: String, description: String, level: Int, permissions: [String!]): Boolean!
    deleteRole(id: ID!): Boolean!

    # Assets
    uploadAsset(src: String!, filename: String!, folder: String, site_id: String!): Asset
    updateAssetTitle(id: ID!, locale: String!, title: String!): Boolean!
    removeAssets(assets: [ID!]!): Boolean!
    transformAsset(id: ID!, name: String!, size: SizeInput!): String!
    customTransformAsset(id: ID!, name: String!, src: String!): String!
    moveFiles(ids: [ID!]!, folder: String!): Boolean!
    addFolder(folder: String!, site_id: String!): Int!
    removeFolder(folder: String, move_to: String!, site_id: String!): Boolean!

    # Emails V1
    createEmailV1(name: String!, subject: LocaleFieldInput!, title: LocaleFieldInput!, content: LocaleFieldInput!, cta: LocaleFieldInput!, cta_title: LocaleFieldInput!, template: String!): Boolean!
    updateEmailV1(id: ID!, name: String, subject: LocaleFieldInput, title: LocaleFieldInput, content: LocaleFieldInput, cta: LocaleFieldInput, cta_title: LocaleFieldInput, template: String): Boolean!
    deleteEmailV1(id: ID!): Boolean!
    deleteEmailBySlugV1(slug: String!): Boolean!

    # Emails
    createEmail(name: String!, subject: LocaleFieldInput!, fields: [EmailFieldInput!]!, template: String!, site_id: String!, preview: Boolean): Boolean!
    updateEmail(id: ID!, name: String, subject: LocaleFieldInput, fields: [EmailFieldInput!]!, template: String): Boolean!
    deleteEmail(id: ID!): Boolean!
    deleteEmails(ids: [ID!]!): Boolean!
    deleteEmailBySlug(slug: String!, site_id: String!): Boolean!
    testEmail(email: String!): Boolean!
    createPreviewEmail(name: String!, subject: LocaleFieldInput!, fields: [EmailFieldInput!]!, template: String!, site_id: String!): String!

    # Entries
    createEntryType(handle: String!, title: String!, url_prefix: LocaleFieldInput!, entry_layout_id: ID, use_categories: Boolean): EntryType
    updateEntryType(handle: String!, title: String, url_prefix: LocaleFieldInput, entry_layout_id: ID, use_categories: Boolean): Boolean
    deleteEntryType(id: ID!): Boolean

    createEntry(entry_type_handle: String, locale: String!, is_homepage: Boolean!, title: String!, template: String!, slug: String, categories: [ID!], content: Json, parent: ParenInput, site_id: ID, alternates: [AlternateInput!]): EntryResult
    updateEntry(entry_type_handle: String, id: ID!, locale: String, is_homepage: Boolean, title: String, template: String, slug: String, categories: [ID!], content: Json, parent: ParenInput, site_id: ID, alternates: [AlternateInput!], bypass_validation: Boolean): [EntryErrors]
    updateEntrySeo(entry_id: ID!, title: String, description: String, keywords: String, robots: Boolean, sitemap: Boolean, default_image: String, social_metas: [SocialMetaInput]): Boolean
    applyVersion(entry_version_id: ID!): Boolean
    publishEntry(id: ID!, publication_date: Int, expiration_date: Int, site_id: String): ID
    unpublishEntry(id: ID!): Boolean
    deleteEntry(entry_type_handle: String, id: ID!, soft: Boolean): Boolean

    createEntryField(key: String!, name: String!, label: LocaleFieldInput!, placeholder: LocaleFieldInput, explain: LocaleFieldInput, type: String!, validation: String, repeatable: Boolean, searchable: Boolean, required: Boolean!,  config: Json): EntryField
    updateEntryField(id: ID!, name: String, label: LocaleFieldInput, placeholder: LocaleFieldInput, explain: LocaleFieldInput, type: String, validation: String, repeatable: Boolean, searchable: Boolean, required: Boolean, config: Json): Boolean!
    deleteEntryField(id: ID, key: String): Boolean!
    deleteEntryFields(ids: [ID!]!): Int!

    createEntryLayout(title: String!, schema: [EntryLayoutTabInput!]!, slug: String!): EntryLayout
    updateEntryLayout(id: ID!, title: String!, schema: [EntryLayoutTabInput!]!, slug: String!): Boolean!
    deleteEntryLayout(id: ID!, soft: Boolean): Boolean!
    deleteEntryLayouts(ids: [ID!]!, soft: Boolean): Boolean!
    restoreEntryLayouts(ids: [ID!]!): Boolean!

    # Categories
    createCategory(name: LocaleFieldInput!, parent_id: ID!, site_id: String!): Boolean!
    updateCategory(id: ID!, name: LocaleFieldInput!, parent_id: ID!): Boolean!
    updateCategoryOrders(tree: [CategorySortItem!]!, site_id: String!): Boolean!
    deleteCategory(id: ID!): Boolean!
    deleteCategoryBySlug(slug: String!, site_id: String!): Boolean!

    # Navigation
    createNavigation(title: String!, slug: String!, structure: [NavigationItemInput!]!, locale: String!, site_id: String!): String!
    updateNavigation(id: ID!, title: String!, slug: String!, structure: [NavigationItemInput!]!, locale: String!): Boolean!
    deleteNavigation(id: ID!): Boolean!

    # Groups
    createGroup(name: String!): String!
    updateGroup(id: ID!, name: String!): Boolean!
    deleteGroup(id: ID!): Boolean!

    # Queue
    createTask(name: String!, action: String!, priority: Int!, retriable: Boolean!): Boolean!
    retryTask(id: ID!): Boolean!
    changeTaskSchedule(id: ID!, timestamp: Int!): Boolean!
    startAllTasks: Boolean!
    stopTask(pid: Int!): Boolean!
    stopAllTasks: Boolean!
    cancelTask(id: ID!): Boolean!

    # Forms
    processForm(name: String!, csrf: String!, form_data: FormDataInput!): FormProcessingResult!

    # Global SEO
    generateSitemap: Boolean!
    generateRobot(template: String!): Boolean!
    setSeoDefaultConfig(config: SeoDefaultConfigInput): Boolean!
    setSeoSettings(settings: SeoSettingsInput): Boolean!

    # Redirection
    createRedirection(url: String!, redirect_url: String!, redirect_type: RedirectType!): Boolean!
    updateRedirection(id: ID!, url: String!, redirect_url: String!, redirect_type: RedirectType!): Boolean!
    deleteRedirection(id: ID!): Boolean!

    #{CUSTOM_MUTATIONS}#
}

type SeoDefaultConfig {
    title: String!
    description: String!
    keywords: String!
    robots: Boolean!
    sitemap: Boolean!
    default_image: String!
    social_metas: SocialMeta
}

input SeoDefaultConfigInput {
    title: String!
    description: String!
    keywords: String!
    robots: Boolean!
    sitemap: Boolean!
    default_image: String!
    social_metas: SocialMetaInput
}

type SeoSettings {
    separator_character: String!
    sitename: String!
    sitename_position: SitenamePosition!
}

input SeoSettingsInput {
    separator_character: String!
    sitename: String!
    sitename_position: SitenamePosition!
}

enum SitenamePosition {
    BEFORE
    AFTER
}

input FormDataInput {
    data: Json
}

type FormProcessingResult {
    code: Int!
    message: String!
    missing: [String!]!
}

scalar Json

type TasksListing {
    pagination: Pagination!
    list: [Task!]!
}

input CategorySortItem {
    id: String!
    parent: String
    order: Int!
}

input UserSort {
    sort: String!
    order: SortingOrder!
}

input UserType {
    type: String!
    except: Boolean!
}

input MetaSearch {
    key: String!
    value: String!
}

enum SortingOrder {
    ASC
    DESC
}

type LoginResult {
    user_id: String!,
    message: String!
}

type User {
    _id: ID!
    name: UserName!
    email: String!
    roles: [String!]
    status: Boolean!
    avatar: String!
    permissions: [String!]
    meta: UserMeta!
    auth_token: String
    created_at: Int!
    validated: Boolean!
    locale: String!
    group: String
    highest_level: Int!
}

type UserListing {
    pagination: Pagination!
    list: [User!]!
}

type Pagination {
    current: Int!
    totalPages: Int!
    total: Int!
}

type UserName {
    first: String!
    last: String!
    full: String!
}

input UserNameInput {
    first: String!
    last: String!
}

type UserMeta {
    #{CUSTOM_META}#
}

input UserMetaInput {
    #{CUSTOM_META_INPUT}#
}

type Flags {
    #{CUSTOM_FLAGS}#
}

input FlagsInput {
    #{CUSTOM_FLAGS}#
}

type Role {
    _id: ID!
    name: String!
    description: String!
    slug: String!
    level: Int!
    permissions: [String!]!
    member_count: Int!
}

type RoleConfig {
    role: Role!
    allowedPermissions: [String!]!
    permissions: [ACL!]!
}

type ACL {
    group: String!
    type: String!
    value: String!
}

type Asset {
    _id: ID!
    filename: String!
    site_id: String!
    name: String!
    title: LocaleField!
    folder: String!
    url: String!
    filesize: Int!
    size: Size!
    is_image: Boolean!
    uploader: User
    created_at: Int!
    transforms: [Transform!]!
}

type Folder {
    slug: String!
    name: String!
    deletable: Boolean!
}

type AssetListing {
    pagination: Pagination!
    list: [Asset!]!
}

type AssetConfig {
    maxSize: Int!
    blacklist: [String!]!
}

type Entry {
    _id: ID!
    entry_type: EntryType!
    parent: Entry
    site_id: String!
    locale: String!
    alternates: [Alternate]!
    is_homepage: Boolean!
    publication: EntryPublication
    trashed: Boolean!
    title: String!
    template: String!
    slug: String
    url: String!
    authors: Authors!
    dates: Dates!
    categories: [Category!]!
    content: Json
    seo: EntrySeo
}

type EntryType {
    _id: ID!
    title: String!
    handle: String!
    url_prefix: LocaleField!
    entry_layout_id: ID
    use_categories: Boolean!
}

type EntryLayout {
    _id: ID!
    slug: String
    title: String!
    authors: Authors!
    dates: Dates!
    is_trashed: Boolean!
    used_by: Int
    record_count: Int
    schema: [EntryLayoutTab!]
}

type EntrySeo {
    _id: ID!
    title: String!
    alternates: [Alternate!]!
    url: String
    locale: String
    description: String
    keywords: String
    robots: Boolean
    sitemap: Boolean
    default_image: String
    social_metas: [SocialMeta]!
}

type EntryVersion {
    _id: ID!
    created_at: Int!
    user_id: ID!
    user_full_name: String!
    user_email: String!
    entry_id: ID!
    entry: Entry!
}

type EntryPublication {
    _id: ID!
    entry_id: ID!
    version: EntryVersion!
    dates: PublicationDates!
    site_id: String!
    entry_url: String!
    user_full_name: String!
    user_email: String!
}

type EntryField {
    _id: ID!
    key: String!
    name: String!
    label: LocaleField!
    placeholder: LocaleField
    explain: LocaleField
    validation: String
    required: Boolean!
    repeatable: Boolean!
    searchable: Boolean!
    type: String!
    config: Json!
}

type SocialMeta {
    handle: String!
    content: [SocialMetaContent]
}

type SocialMetaContent {
    name: String!
    content: String!
}

input SocialMetaInput {
    handle: String!
    content: [SocialMetaContentInput]
}

input SocialMetaContentInput {
    name: String!
    content: String!
}

type Alternate {
    locale: String!
    url: String!
    entry_id: ID!
}

input AlternateInput {
    locale: String!
    entry_id: ID!
}

type Authors {
    created_by: User
    updated_by: User
    deleted_by: User
}

type Dates {
    created: Int
    updated: Int
    deleted: Int
}

type PublicationDates {
    published: Int!
    expired: Int
}

input ParenInput {
    handle: String!
    parent_id: ID!
}

type EntryResult {
    entry: Entry
    errors: [EntryErrors]!
}

type EntryErrors {
    key: String!
    errors: [String]!
}

type EntryListing {
    pagination: Pagination!
    list: [Entry!]!
}

type EntryLayoutTab {
    label: String!
    fields: [EntryField!]
}

input EntryLayoutTabInput {
    label: String!
    fields: [ID!]!
}

type LocaleField {
    #{LOCALE_FIELDS}#
}

input LocaleFieldInput {
    #{LOCALE_FIELDS}#
}

type Transform {
    transform: String!
    filename: String!
    name: String!
    url: String!
}

type Size {
    width: Int!
    height: Int!
}

input SizeInput {
    width: Int!
    height: Int!
    crop: String!
}

type Email {
    _id: ID!
    name: String!
    slug: String!
    subject: LocaleField!
    fields: [EmailField!]!
    template: String!
    created_at: Int!
    last_modified: Int!
}

type EmailField {
    key: String!
    value: LocaleField!
}

input EmailInput {
    name: String!
    subject: LocaleFieldInput!
    fields: EmailFieldInput!
    template: String!
}

input EmailFieldInput {
    key: String!
    value: LocaleFieldInput!
}

type PasswordChangeResult {
    password_check: Boolean!
    code_check: Boolean!
}

type RegisteredExtensions {
    modules: [Module!]!
    containers: [Container!]!
}

type Module {
    name: String!
    info: ModuleInfo!
    class: String!
    middlewares: [Middleware!]!
}

type Container {
    name: String!
    info: ContainerInfo!
    class: String!
    middlewares: [Middleware!]!
    graphql: GraphQLInfo!
    routes: Routes!
}

type ContainerInfo {
    name: String!
    description: String!
    version: Float!
    semver: String!
    author: String!
    link: String!
}

type ModuleInfo {
    name: String!
    description: String!
    version: Float!
    semver: String!
    author: String!
    link: String!
}

type Middleware {
    type: String!
    name: String!
}

type GraphQLInfo {
    queries: [QueryInfo!]!
    mutations: [MutationInfo!]!
    resolvers: [ResolverInfo!]!
}

type QueryInfo {
    operation: String!
    handler: String!
    method: String!
}

type MutationInfo {
    operation: String!
    handler: String!
    method: String!
}

type ResolverInfo {
    operation: String!
    handler: String!
    method: String!
}

type Routes {
    post: [String!]!
    get: [String!]!
    put: [String!]!
    delete: [String!]!
    redirect: [String!]!
}

type Category {
    _id: ID!
    name: LocaleField!
    slug: String!
    order: Int!
    parent_id: String!
    children: [Json!]!
}

type NavigationItem {
    label: String!
    url: String!
    is_entry: Boolean!
    is_category: Boolean!
    entry_id: String!
    external: Boolean!
    children: [NavigationItem!]!
}

input NavigationItemInput {
    label: String!
    url: String!
    is_entry: Boolean!
    is_category: Boolean!
    entry_id: String!
    external: Boolean!
    children: [NavigationItemInput!]!
}

type Navigation {
    _id: ID!
    title: String!
    slug: String!
    structure: [NavigationItem!]!
    locale: String!
}

type Group {
    _id: ID!
    name: String!
    slug: String!
    user_count: Int!
}

type Permission {
    name: String!
    unnormalized_name: String!
    group: String!
    category: String!
    description: LocaleField!
}

type NavigationElements {
    post_entries: [NavigationElement!]!
    pre_users: [NavigationElement!]!
    pre_settings: [NavigationElement!]!
}

type NavigationElement {
    name: String!
    icon: String!
    url: String!
    label: LocaleField!
    slug: String!
    parent: String!
    permission: String!
}

type SettingsElements {
    entries: [SettingsElement!]!
    emails: [SettingsElement!]!
    others: [SettingsElement!]!
}

type SettingsElement {
    name: String!
    icon: String!
    url: String!
    label: LocaleField!
    slug: String!
    permission: String!
}

type EmailTemplate {
    name: String!
    configs: [EmailFieldConfig!]!
}

type EmailFieldConfig {
    type: String!
    key: String!
    label: LocaleField!
}

type Task {
    _id: ID!
    name: String!
    action: String!
    priority: Int!
    log: [String!]
    retriable: Boolean!
    retry_count: Int!
    scheduled_at: Int!
    locked: Boolean!
    executed: Boolean!
    executed_at: Int!
    execution_result: String!
    execution_success: Boolean!
}

type Redirection {
    url: String!
    redirect_url: String!
    redirect_type: String!
    hit_count: Int!
    last_attempt: Int!
}

type RedirectionListing {
    pagination: Pagination!
    list: [Redirection!]!
}

type BrokenLink {
    url: String!
    hit_count: Int!
    last_attempt: Int!
}

type BrokenLinkListing {
    pagination: Pagination!
    list: [BrokenLink!]!
}

enum RedirectType {
    PERMANENT
    TEMPORARY
}

#{CUSTOM_TYPES}#