type Query {
    version: String

    temp(entryId: String!): String

    # Users
    user(id: ID!): User
    users(page: Int!, limit: Int!, search: String, sorting: UserSort, type: UserType, meta: MetaSearch, status: Boolean, validated: Boolean): UserListing

    # Authentication
    resendValidationEmail(email: String!): Boolean!
    authenticate(email: String!, password: String!): LoginResult!
    verifyAuthenticationToken(token: String!): User
    verifyTFA(user_id: ID!, code: String!): User
    forgotPassword(email: String!): Boolean!
    userWithToken: User

    # Roles & ACL
    roles: [Role!]!
    role(id: ID!): RoleConfig

    # Assets
    asset(id: ID!): Asset
    assets(page: Int!, limit: Int!, folder: String, search: String, sort: String, direction: SortingOrder): AssetListing

    # Emails
    email(id: ID!): Email
    emails: [Email!]!

    # Entries
    homepageEntry(locale: String!, site_id: ID!): Entry
    entryTypes: [EntryType!]
    entryType(handle: String): EntryType
    entries(entry_type_handle: String!, page: Int, limit: Int, search: String, sort: String, direction: Int, ignore_trash: Boolean): EntryListing
    entryByUrl(url: String!, site_id: String): Entry
    entry(id: ID!, entry_type_handle: String): Entry
    entryLayout(id: ID!): EntryLayout
    entryLayouts: [EntryLayout!]
    entryVersion(id: ID!): EntryVersion
    entryVersions(entry_id: ID!): [EntryVersion!]
    fields: [FieldInfo]

    # Registers
    registeredExtensions: RegisteredExtensions!

    # Categories
    category(id: ID): Category
    categoryBySlug(slug: String!, site_id: String!): Category
    categoryFullTree(parent_id: ID!, site_id: String!): [Category!]!
    categoryEntries(slug: String, id: ID, site_id: String): [Entry!]

    # Navigation
    navigation(name: String!): [NavigationItem!]!
    navigationDetails(name: String!): Navigation

    #{CUSTOM_QUERIES}#
}

type Mutation {
    # Users
    createUser(name: UserNameInput!, email: String!, password: String!, avatar: String, meta: UserMetaInput!, locale: String, roles: [String!], createWithSetPassword: Boolean, useEmailTemplate: String): ID!
    createAdminUser(name: UserNameInput!, email: String!, roles: [String!]!, avatar: String, meta: UserMetaInput!, locale: String): ID!
    updateUser(id: ID!, name: UserNameInput! email: String, password: String, roles: [String!], avatar: String, meta: UserMetaInput, locale: String): Boolean!
    deleteUser(id: ID!): Boolean!
    validateAccount(code: String!): Boolean!
    changePassword(code: String!, password: String!): PasswordChangeResult!

    # Roles
    createRole(name: String!, description: String!, level: Int!, permissions: [String!]!): Boolean!
    updateRole(id: ID!, name: String, description: String, level: Int, permissions: [String!]): Boolean!
    deleteRole(id: ID!): Boolean!

    # Assets
    uploadAsset(src: String!, filename: String!, folder: String): String!
    updateAssetTitle(id: ID!, locale: String!, title: String!): Boolean!
    deleteAsset(id: ID!): Boolean!
    transformAsset(id: ID!, name: String!, size: SizeInput!): String!

    # Emails
    createEmail(name: String!, subject: LocaleFieldInput!, title: LocaleFieldInput!, content: LocaleFieldInput!, cta: LocaleFieldInput!, cta_title: LocaleFieldInput!, template: String!): Boolean!
    updateEmail(id: ID!, name: String, subject: LocaleFieldInput, title: LocaleFieldInput, content: LocaleFieldInput, cta: LocaleFieldInput, cta_title: LocaleFieldInput, template: String): Boolean!
    deleteEmail(id: ID!): Boolean!
    deleteEmailBySlug(slug: String!): Boolean!

    # Entries
    createEntryType(handle: String!, title: String!, url_prefix: LocaleFieldInput!, entry_layout_id: ID): EntryType
    updateEntryType(handle: String!, title: String, url_prefix: LocaleFieldInput, entry_layout_id: ID): Boolean
    deleteEntryType(id: ID!): Boolean
    createEntry(entry_type_handle: String, locale: String!, is_homepage: Boolean!, title: String!, template: String!, slug: String, categories: [ID!], content: [ModelFieldContentInput!], parent: ParenInput, site_id: ID, alternates: [AlternateInput!]): EntryResult
    updateEntry(entry_type_handle: String, id: ID!, locale: String, is_homepage: Boolean, title: String, template: String, slug: String, categories: [ID!], content: [ModelFieldContentInput!], parent: ParenInput, site_id: ID, alternates: [AlternateInput!], bypass_validation: Boolean): [EntryErrors]
    updateEntrySeo(entry_id: ID!, title: String, description: String, keywords: String, robots: Boolean, sitemap: Boolean, default_image: String, social_metas: [SocialMetaInput]): Boolean
    applyVersion(entry_version_id: ID!): Boolean
    publishEntry(id: ID!, publication_date: Int, expiration_date: Int, site_id: String): ID
    unpublishEntry(id: ID!): Boolean
    deleteEntry(entry_type_handle: String, id: ID!, soft: Boolean): Boolean
    createEntryLayout(titles: LocaleFieldInput!, schema: [FieldConfigsInput!]!, slug: String): EntryLayout
    updateEntryLayoutSchema(id: ID!, titles: LocaleFieldInput, schema_update: [SchemaUpdateInput]): Boolean
    updateEntryLayoutSchemaKey(id: ID!, key: String!, newKey: String!): Boolean
    deleteEntryLayout(id: ID!, soft: Boolean): Boolean

    # Categories
    createCategory(name: LocaleFieldInput!, parent_id: String!, site_id: String!): Boolean!
    updateCategory(id: ID!, name: LocaleFieldInput!, parent_id: String!): Boolean!
    updateCategoryOrders(parent_id: ID!, order: [String!]!, site_id: String!): Boolean!
    deleteCategory(id: ID!): Boolean!
    deleteCategoryBySlug(slug: String!, site_id: String!): Boolean!

    # Navigation
    createNavigation(name: String!, structure: NavigationItemInput!, locale: String!): String!
    updateNavigation(name: String!, structure: NavigationItemInput!, locale: String!): Boolean!
    deleteNavigation(name: String!): Boolean!

    #{CUSTOM_MUTATIONS}#
}

scalar Json

input UserSort {
    sort: String!
    order: SortingOrder!
}

input UserType {
    type: String!
    except: Boolean!
}

input MetaSearch {
    key: String!
    value: String!
}

enum SortingOrder {
    ASC
    DESC
}

type LoginResult {
    user_id: String!,
    message: String!
}

type User {
    _id: ID!
    name: UserName!
    email: String!
    roles: [String!]
    status: Boolean!
    avatar: String!
    permissions: [String!]
    meta: UserMeta!
    auth_token: String
    created_at: Int!
    validated: Boolean!
    locale: String!
}

type UserListing {
    pagination: Pagination!
    list: [User!]!
}

type Pagination {
    current: Int!
    totalPages: Int!
    total: Int!
}

type UserName {
    first: String!
    last: String!
    full: String!
}

input UserNameInput {
    first: String!
    last: String!
}

type UserMeta {
    #{CUSTOM_META}#
}

input UserMetaInput {
    #{CUSTOM_META_INPUT}#
}

type Flags {
    #{CUSTOM_FLAGS}#
}

input FlagsInput {
    #{CUSTOM_FLAGS}#
}

type Role {
    _id: ID!
    name: String!
    description: String!
    slug: String!
    level: Int!
    permissions: [String!]!
}

type RoleConfig {
    role: Role!
    allowedPermissions: [String!]!
    permissions: [ACL!]!
}

type ACL {
    group: String!
    type: String!
    value: String!
}

type Asset {
    _id: ID!
    filename: String!
    site_id: String!
    name: String!
    title: LocaleField!
    folder: String!
    url: String!
    filesize: Int!
    size: Size!
    is_image: Boolean!
    uploader: User
    created_at: Int!
    transforms: [Transform!]!
}

type AssetListing {
    pagination: Pagination!
    list: [Asset!]!
}

type Entry {
    _id: ID!
    entry_type: EntryType!
    parent: Entry
    site_id: String!
    locale: String!
    alternates: [Alternate]!
    is_homepage: Boolean!
    publication: EntryPublication
    trashed: Boolean!
    title: String!
    template: String!
    slug: String
    url: String!
    authors: Authors!
    dates: Dates!
    categories: [Category!]!
    content: [ModelFieldContent!]!
    schema: [LayoutField]!
    seo: EntrySeo
}

type EntryType {
    _id: ID!
    title: String!
    handle: String!
    url_prefix: LocaleField!
    entry_layout_id: ID
}

type EntryLayout {
    _id: ID!
    slug: String # Add a deprecation message to put it required
    titles: LocaleField!
    schema: [LayoutField]!
    authors: Authors!
    dates: Dates!
    is_trashed: Boolean!
}

type EntrySeo {
    _id: ID!
    title: String!
    alternates: [Alternate!]!
    url: String
    locale: String
    description: String
    keywords: String
    robots: Boolean
    sitemap: Boolean
    default_image: String
    social_metas: [SocialMeta]!
}

type EntryVersion {
    _id: ID!
    created_at: Int!
    user_id: ID!
    user_full_name: String!
    user_email: String!
    entry_id: ID!
    entry: Entry!
}

type EntryPublication {
    _id: ID!
    entry_id: ID!
    version: EntryVersion!
    dates: PublicationDates!
    site_id: String!
    entry_url: String!
    user_full_name: String!
    user_email: String!
}

type SocialMeta {
    handle: String!
    content: [SocialMetaContent]
}

type SocialMetaContent {
    name: String!
    content: String!
}

type LayoutField {
    key: String!
    fieldConfigs: [FieldConfig!]!
}

type FieldConfig {
    labels: LocaleField!
    handle: String!
    inputSettings: [InputSetting!]!
}

type InputSetting {
    inputKey: String!
    settings: [Setting]!
}

type Setting {
    name: String!
    value: String
    options: [Options!]
    type: String!
}

type ModelFieldContent {
    key: String!
    content: Json
    handle: String!
    type: Json!
}

input SocialMetaInput {
    handle: String!
    content: [SocialMetaContentInput]
}

input SocialMetaContentInput {
    name: String!
    content: String!
}

input FieldConfigsInput {
    labels: LocaleFieldInput
    key: String!
    handle: String!
    inputSettings: [InputSettingsInput]!
}

input SchemaUpdateInput {
    key: String!
    labels: LocaleFieldInput
    inputSettings: [InputSettingsInput]!
}

input InputSettingsInput {
    inputKey: String
    settings: [SettingsInput]
}

input SettingsInput {
    name: String!
    value: String
    options: [OptionsInput!]
    type: InputType!
}

input OptionsInput {
    value: String!
    label: String!
}

type Options {
    value: String!
    label: String!
}

input ModelFieldContentInput {
    key: String!
    content: Json
}

input FieldContentInput {
    value: String
    type: InputType!
}

enum InputType {
    integer
    float
    string
    boolean
    array
}

type Alternate {
    locale: String!
    url: String!
    entry_id: ID!
}

input AlternateInput {
    locale: String!
    entry_id: ID!
}

type Authors {
    created_by: User
    updated_by: User
    deleted_by: User
}

type Dates {
    created: Int
    updated: Int
    deleted: Int
}

type PublicationDates {
    published: Int!
    expired: Int
}

input ParenInput {
    handle: String!
    parent_id: ID!
}

type EntryResult {
    entry: Entry
    errors: [EntryErrors]!
}

type EntryErrors {
    key: String!
    errors: [[String]]!
}

type EntryListing {
    pagination: Pagination!
    list: [Entry!]!
}

type FieldInfo {
    name: String!
    fullname: String!
    handle: String!
    description: String!
    storingType: String!
    searchable: Boolean!
    inputs: [FieldInputInfo]!
}

type FieldInputInfo {
    name: String!
    fullname: String!
    type: String!
    inputKey: String
    availableSettings: [Setting!]!
}

type LocaleField {
    #{LOCALE_FIELDS}#
}

input LocaleFieldInput {
    #{LOCALE_FIELDS}#
}

type Transform {
    transform: String!
    filename: String!
    name: String!
    url: String!
}

type Size {
    width: Int!
    height: Int!
}

input SizeInput {
    width: Int!
    height: Int!
    crop: String!
}

type Email {
    _id: ID!
    name: String!
    slug: String!
    subject: LocaleField!
    title: LocaleField!
    content: LocaleField!
    cta: LocaleField!
    cta_title: LocaleField!
    template: String!
    created_at: Int!
    last_modified: Int!
}

input EmailInput {
    name: String!
    subject: LocaleFieldInput!
    title: LocaleFieldInput!
    content: LocaleFieldInput!
    cta: LocaleFieldInput!
    cta_title: LocaleFieldInput!
    template: String!
}

type PasswordChangeResult {
    passwordCheck: Boolean!
    codeCheck: Boolean!
}

type RegisteredExtensions {
    modules: [Module!]!
    containers: [Container!]!
}

type Module {
    name: String!
    info: ModuleInfo!
    class: String!
    middlewares: [Middleware!]!
}

type Container {
    name: String!
    info: ContainerInfo!
    class: String!
    middlewares: [Middleware!]!
    graphql: [GraphQLInfo!]!
    routes: Routes!
}

type ContainerInfo {
    name: String!
    description: String!
    version: Float!
    semver: String!
    author: String!
    link: String!
}

type ModuleInfo {
    name: String!
    description: String!
    version: Float!
    semver: String!
    author: String!
    link: String!
}

type Middleware {
    type: String!
    name: String!
}

type GraphQLInfo {
    queries: [QueryInfo!]!
    mutations: [MutationInfo!]!
}

type QueryInfo {
    operation: String!
    handler: String!
    method: String!
}

type MutationInfo {
    operation: String!
    handler: String!
    method: String!
}

type Routes {
    post: [String!]!
    get: [String!]!
    put: [String!]!
    delete: [String!]!
    redirect: [String!]!
}

type Category {
    _id: ID!
    name: LocaleField!
    slug: String!
    order: Int!
    parent_id: String!
    children: [Category!]!
}

type NavigationItem {
    label: String!
    url: String!
    is_entry: Boolean!
    entry_id: String!
    external: Boolean!
    children: [NavigationItem!]!
}

input NavigationItemInput {
    label: String!
    url: String!
    is_entry: Boolean!
    entry_id: String!
    external: Boolean!
    children: [NavigationItemInput!]!
}

type Navigation {
    _id: ID!
    title: String!
    name: String!
    structure: [NavigationItem!]!
    locale: String!
}

#{CUSTOM_TYPES}#